Notes:
associative and distributive laws and de morgan in boolean algebra
Ex. x or (y or z) = (x or y) or z (same with and) 
Ex. x and (y or z) = (x and y) or (x and z)
Idempotence value and value = value
Double negation not not x = x

From truth table to boolean function:
-start with rows with 1 and make a working expression for each row
-or all the 1 rows together
-then simplify
Sum-Of-Products, or SOP, Boolean expressions may be generated from truth tables quite easily, by determining which rows of the table have an output of 1, writing one product term for each row, and finally summing all the product terms. This creates a Boolean expression representing the truth table as a whole.
Sum-Of-Products expressions lend themselves well to implementation as a set of AND gates (products) feeding into a single OR gate (sum).
Product-Of-Sums, or POS, Boolean expressions may also be generated from truth tables quite easily, by determining which rows of the table have an output of 0, writing one sum term for each row, and finally multiplying all the sum terms. This creates a Boolean expression representing the truth table as a whole.
Product-Of-Sums expressions lend themselves well to implementation as a set of OR gates (sums) feeding into a single AND gate (product).
-add is OR
-multiply is AND

-all can represented only with not and and - in reality, nand can do everything - nand(x, x) = Not (x and x)
-Ex. Not x = x Nand x
-Ex. x and y = Not(x Nand y)

Logic Gates:
-Elementary: Nand, And, Or, Not
-Composite: bunch of elementary gates
-signals can send simultaenous signals to gates

HDL:
HDL file (we will use CHIP)
-just a textual description of chip
-functional language
-go left to right with chip diagram
-mainly VHDL and Verilog
-specify:
	-module name
	-inputs
	-outputs
	-specify implementation w/ PARTS
	-you can split signals
	-can use other gates with official names and hdl vars only
	-Ex. if use not and not's var is in, must use in=var in module
	-must name all signals
	-describe gate diagram one signal at a time and connections
Ex.
CHIP Xor
{
	IN a, b;
	OUT out;
	
	PARTS: //implementation
	Not (in=a, out=nota);
	Not (in=b, out=notb);
	And (a=a, b=notb, out=aAndNotb);
	And (a=nota, b=b, out=notaAndb);
	Or (a=aAndNotb, b=notaAndb, out=out);
}
	
-or is three nand gates 2 to 1
-array of bits, messed with together is a bus
-each bit equals a wire
-specify array with var[size]
-can access index of the bits
-specify range with x..y (Ex. 0..7)
-for this project, false and true may be used as buses of any width
-multiplexor-select signal to forward
-can make programmable gate
-only need not, or, and for multiplexor
-demultiplexor - take in input and give a or b
-can combine mux and dmux for communication
-bus - right to left

-Boolean Arithmetic and the ALU
-usually when allocated, about half of bits for negatives
-add and negative is all that you need, multiply and divide better easier at software level
-if overflow, computer usually do nothing
-Adder
-Half Adder - adds two bits
-Full Adder - adds three bits
-Adder - adds two numbers
-Half Adder:
	-takes in two bits, return two output
	-returns a sum and a carry bit
-Full Adder
	-takes in three bits, return a sum and carry bit
-Multi-bit Adder
	-start with half-adder
	-then full adders
-Negative Numbers in Binary
	-use first bit as sign bit, but problem with two zeroes
	-SO NOW TWO'S COMPLEMENT
	-negative number -x represented with 2^n - x where n is bus size
	-lose left most bit
	-probably just flip all bits to get negative and then add one
	-to add one, flip the bits from right to left, stopping the first time 0 is flipped to one
-Von Neumann Architecture
-multiple bits as input, including what function to use (predefined)
-ALU has both logical and arithmetic units
-what function to use is fed in via a truth table
-two output bits later - for HACK, there is one that tells if zero and if negative

-what we need now
-use the same hardware over and over again
-memory to store states
-need to make sure to not compute faster than physically possible
-the clock
	-convert continuous time into discrete time
	-each cycle is one digital time unit
	-sequential logic
		-just inputs labeled by time
	-choose clock to make sure things work, make sure voltage stabilize in transistor
	-use end of voltage instability region as the official state for input
-combinatorial logic vs sequential logic
-combinatorial: out[t] = function(int[t])
-sequential: out[t] = fucntion(int[t-1])
-because of sequential logic, can manuipulate to this:
	state[t] = function(state[t-1])
-can have values in same wires
-sequential logic - depends on present and previous values
-hence, sequential logic has state, or memory
-Ex.
| 1 |   2  |   3  |time
| a | f(a) | f(b) |state
a     b      c
    ->     ->
-slowest sequential logic is the clock speed
-Remember state
-need one bit of information from t-1
-can be either 0 or 1
-when go from t-1 to t, must remember its state, 0 or 1
-remembers by flipping between these possible states - Flip-Flops
-remember the flip flops
-flip flops made from nand gates - put nand gates in a loop method
-nand2tetris simulator forbids combinatorial loops, only sequential gate for loops
-sequential logic implementation
	-get combinatorial logic gate with input from t and t-1
	-send signal to array of flip flops
	-send back previous signal as t-1 and also output
-remember forever with 1-bit register
-this chip (1 bit register) is the bit chip - two inputs, input and load
-logic like this: if load(t-1) then out(t)=in(t-1) else out(t)=out(t-1)
	-so if load(t-1) is 1, then output is input at time t-1, else just keep outputting old value
	-remembers the in bit if load is set to 1
-possible implementation, need D flip flop
	-use mux plus d flip flop, load and in and return value from flip flop connect to multiplexer
-CHANGE BY NEXT CYCLE IN REGISTER
-basic memory
	-chain 1-bit register, make multi-bit register - bus size is word width
	-register;s state - value currently being expressed by internal circuit
	-get value by reading out value
	-set new value using in and set load to 1 for that value

	-RAM abstraction
	-sequence of n addressable registers with addresses 0 to n-1
	-holds registers, only one register selected at a time
	-need to select unique regiser using input called address
	-need log base 2 of n of bits for address input
	-sequential chip (has triangles in diagram)
	-read register by set address to desired address and probe the out state
	-write by set address, set in, and assert load bit
	-change by next cycle onwards
	-can select any register at same time period

-counters
	-device which stores (and sometimes displays) the number of times a particular event or process has occurred, often in relationship to a clock signal
	-helps keep track of which instruction should be fetched and executed next
	-three possible control settings - reset (Fetch first instruction), next (Fetch next instruction), goto (fetch instruction specified)
	-abstraction
		input and ouput, three control bits - reset, load, inc
	-if no control bits specified, just emit control state

-building a flip flop
	-connect to nand gates, each with their own input and one of the input being from the output of the other
	-this makes it very stable

-building the 8 register RAM
	-should send in statement to all registers first
	-then use mux and dmux to get right one

-bigger register RAM
	-stack up the ram below
	-address input can be thought of binary value with 2 fields - which RAM and which register in the selected RAM part
	-use mux and dmux

-counter
	-can use incrementer, register chips, and logic gates

-can loop in HDL, just use the variable in two different places (Ex. start and beginning)


-machine code - sequence of bits to specify instruction, register, etc.
-also have symbols for where
-include basic operations, flow control, logic, arithmetic, may have more functionality, like division and larger data types
-access memory location is expensive
	-need to supply long address and takes time
	-so use memory hierarchy, use registers, cache, main memory, disk
-registers
	-data register, and address register (connect to bigger memory)
-addressing modes (which memory to operate on)
	-can add register directly
	-can add register to memory location
	-can add register to register with memory location on bigger part
	-can add a number to a register
	-used add as an example here
-input output uses a lot of memory (ex. mouse stores last location)
-flow control
	-usually just go to next instruction (1 to 2)
	-so jump to which instruction
	-there are unconditional and conditional jump
-assembler converts assembly to machine language
-if 16 bit computer
	-all data moved in 16 bit
	-data memory - sequence of 16 bit registers
	-instruction memory - sequency of 16 bit memory
	-CPU - operate on 16 bits
	-data/instruction/address bus - 16 bit width
-for HACK machine
	-load in program, press reset, it starts running
	-3 registers, D, 16 bit data, A, 16 bit data or address, M, selected memory register in RAM
	-A and C instructions
	-A instruction -@value, where value is non-negative,a symbol referring to a constant
	Ex. @21
		-set A register to 21
		RAM[21] becomes selected RAM register
	Ex. set RAM[100] to -1
		@100
		M=-1 //selected memory register
	C instruction
		-dest, comp, jump
		-get a computation, store or jump
		-dest and jump is optional
		-comp-can do a bunch of values on 0, 1, A, D, M
		-dest - can go to: null, registers, simultaneously
		-jump register - null, JGT, JEQ, JGE, JLT, JNE, JLE, JMP - always compared to 0
		-syntax is dest = comp; jump
	-if just jump 0;JMP - language requires the ;
-can write machine language symbolically or binary code
-binary code is just opcode
	-Ex. in Hack, 0 can just be @
	-Ex. in Hack, c-instruction, start with opcode 1, two unused bits, a comp bit, dest bit, and jump bits
	-just use a cheatsheet or map 
-input output- like screen and keypad
-screen memory map - used to constantly refresh physical display
-so can manipulate some bits to change refresh cycle, can be treated as matrix
-always take out 16 bit and change and send back (first 32 rows is the first row on display for HACK)
-to set pixel (row,col): i=32*row + col/16
-for this, screen can be its own chip, access from Screen chip
-if add based on overall picture, add 16384 beforehand
-pixel can be retrieved as column % 16
-also keyboard memory map
	-just a single 16 bit register, key press goes to scan code
	-all keys represented by scan key
	-in HACK - 24576 in RAM
	-if 0, no key pressed
-assembly - mneumnoics
-use CPU Emulator for nand2tetris
-register and memory
-M is always RAM[A]
-in assembler, get rid of whitespace
-need to terminate program, else malicious code can be placed there if program doesn't terminate
	-avoid (NOP slide, null instruction/opcode attack)
	-end with infinite loop

-virutal registers too -R0, R1, R2,... R15 = 0, 1, 2, 3, 4, 5, ... 15
-HACK is case sensitive

-now, let's go to branching, variables, iteration
-branching: evaluate boolean and see if jump or move on
	-for asm, only goto stuff
	-layer the jumps correctly
-prevent unreadable code with symbolic referenes
-@LABEL loads it and (LABEL) declares that block
-assembler takes care of this, replace with instruction number
-variables, only one variable type- 16 bit register
	-in hack, can just do @var - tell computer to represent that part as this symbol
-PLEASE COMMENT FOR YOUR SANITY
-all variables allocated 16 and on wards
-this allow for re-allocatable memory, needed if multitasking
-can use anywhere in memory as long as know base memory
-loader takes care of where symbols go to in memory

-iteration
	-obvious
-always write first in pseudo code
-paranthesis is the symbolic declarator for branching

-Pointers
-add D plus M, assign to A - set addresses
-Ex. A=D+m\nM=-1
-set address register to the value of some value register (use pointer arithmetic to figure it out)
- -1 for black pixel
-read kbd to see which key is pressed
-labels is uppercase
-variables is lowercase

-universal turing machine
-von neumann architecture
-memory with program, data, with CPU, input and output
-our CPU has this - ALU, with registers, we also have the control unit
-three types of information
	-data
	-address - which instruction, which data use, execute
	-control - tell what to do
	-connected by control, address, data bus
-in ALU
	-only data and control bus (which operation to perform 
	-data feeds in values
	-control - specify operation, have to tell other parts of system what to do
-in CPU register
	-take in data from data bus and feed back to data bus
	-store addresses (indirect addressing)
	-connect to address bus
-in Memory
	-what address to work with
	-also data bus
	-data and program memory, with control bus too
-Fetch-execute Cycle
	-fetch instruction from CPU memory
		-put the location of the next instruction into the address of the program memory
	-read to get content and run
-how to input address to program memory
-use program counter, manipulate it
-instruction tells what to do
-different bits control what to do
-instruction gets from program memory, tell where instruction come from and control bus what to do
-tells what exactly to do
-addressing clash between fetch and execute cycle
	-both program and data reside in memory
	-so fetch, get instruction from address of next instruction
	-also need to get address of data we need
	-CLASH
	-so do one at a time, multiplexer, point to which address at which cycle
	-multiplexor connected to program counter, data address, determined by fetch/execute bit
-simpler solution, keep program and data separated, it is Harvard Architecture
-CPU
	-heart of computation, seat of control
	-HACK CPU
	-16 bit processor
	-execute current instruction
	-input and output
	-INPUTS
		-data memory, 16 bit
		-instruction memory, 16 bit, value of selected instruction register memory
		-reset, 1 bit input
	-OUTPUTS
		-to write to data memory
			-what to write, outM
			-where to write: addressM
			-1 bit load bit
			-program counter for next instruction memory
	-look at the cpu designs
	-all the "c" represents control bits
	-Instruction handling
		-instruction goes to mux16 and A register
		-send in instruction
		-@ instruction starts with 0
		-opcode + 15 bit value
		-put 15 bit value into A-register
		-outputs the value
		-if starts with opcode 1, it is C instruction
		-decode the fields for different handling
		-A register can be fed from input or ALU output
		-if opcode is 1, loop input from ALU output
		-this needs to be implemented
	-ALU OPERATION
		-from D register or the A/M register
		-control bit tell which
		-6 bits
		-can now computer and output, can feed to D register, A-register via multiplexor, or M register
	-also destination bits, determine if register/memory accepts ALU output
	-ALU can also document if output is 0 or -1
	-reset input, help current program start running
	-control operations
		- Ex. 122accccccdddjjj - represent 0 and 1s
		-j is junk bits - 3 jump bits are 0, no jump, all 1, unconditional goto, else, conditional go to
		-do this with program counter
			-always emit emit address of next execute
			-if want to start, equal 0
			-increment by one step usually
			-if unconditional jump, take from A
			-if conditional, if condition true, make jump or just keep incrementing
			-some logic
			-if reset==1 PC = 0
			else, look at jump bits
			-store result in load, if load bit, jump
			-else program counter++
	-CPU instructions
		-if include D and A, the respective values are read or written to
		-if @x instruction, x is stored in the A-register and emitted by addressM
		-if M included on right hand side, this value is read from inM
		-if M included in Left hand side, ALU output is emitted by outM and writeM bit asserted
		-if there is jump, set counter to that value, otherwise, just increment
	-Memory - 0 to 16383 is data memory, 16384 to 24575 is screen, last one is keyboard
	-so first segment is RAM, then two separate chip parts
	-RAM16K, screen is 8K memory map, with special SCREEN chip, based on regular RAM chip with ability to refresh
	-Keyboard, single 16 bit register, 0 if nothing pressed
	-use builtin keyboard chip, regular chip with ability to reflect what user press
	-read keyboard by probing the output of the keyboard register
	-reset button too
	-instruction memory immplemented with ROM 32K
	-usually burned into ROM chip, plug in
	-in this course, store as text file and put into hardware simulator
	-ROM chip - address in, output out, output is content from address sent in, fed in from program counter
	-CPU connected to memory output
	-for Project 5, let's start building this architecture
	-computer on memory and CPU, memory makes use of RAM and register units
	-CPU makes use of registers, Program Counters (use registers), and ALU
	-C control bits, use HDL subscripting to figure out which bit goes where
	
	-in classic von neumann, data and program in same memory, had to fetch in separate cycles
	-von Neumann for normal use, Harvard for embedded use
	-finite machine state - what computer to do at different states
	-add a state register
	-if want to add more peripherals, add device controllers, to offload from CPU
	-Ex. GPU offloads
	-input/memory/bits read in backwards in this part basically I think

-assembler - translate assembly to machine code, first software layer for most computers
-can be done with cross-compiler
-read assembly language command, break apart different parts, translate it, move on until EOF
-use the syntax to help break fields apart after reading in as array etc.
-then translate into opcode, pad and combine translated fields
-then make into format for computer
-hard part is symbol handling, labels and variables
-must replace all labels and vars with addresses that must be remembered, keep in table
-small problem, forward reference with labels
-easy fix, first pass to get all labels and make a table, then second pass translate
-get rid of comments and whitespace
-binary syntax for @: 0valueInBinary
-use parser, C instruction start with 3 ones
-start by parsing all instructions
-symbol handling - variable, label, and pre-defined
-variable assignment starts from address 16 onwards
-symbol table, keep track of number lines (start from 0)
-we are building a two pass assembler - extract from program label and then variable
-added layers of abstraction not in HACK
	-macros